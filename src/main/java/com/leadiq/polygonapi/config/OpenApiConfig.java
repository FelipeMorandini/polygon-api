package com.leadiq.polygonapi.config;

import io.swagger.v3.oas.models.Components;
import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Contact;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.info.License;
import io.swagger.v3.oas.models.security.SecurityScheme;
import io.swagger.v3.oas.models.servers.Server;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.List;

/**
 * Configuration class for OpenAPI documentation.
 * This class provides a centralized configuration for the API documentation
 * generated by SpringDoc OpenAPI.
 */
@Configuration
public class OpenApiConfig {

    @Value("${spring.application.name:Polygon API}")
    private String applicationName;

    @Value("${springdoc.server.url:http://localhost:8080}")
    private String serverUrl;

    /**
     * Configures the OpenAPI documentation for the application.
     *
     * @return the configured OpenAPI instance
     */
    @Bean
    public OpenAPI customOpenAPI() {
        return new OpenAPI()
                .info(new Info()
                        .title(applicationName)
                        .version("1.0.0")
                        .description("This API provides access to stock market data through the Polygon.io service.")
                        .termsOfService("https://www.example.com/terms")
                        .contact(new Contact()
                                .name("API Support")
                                .url("https://www.example.com/support")
                                .email("support@example.com"))
                        .license(new License()
                                .name("Apache 2.0")
                                .url("https://www.apache.org/licenses/LICENSE-2.0.html")))
                .servers(List.of(
                        new Server()
                                .url(serverUrl)
                                .description("Server URL")))
                .components(new Components()
                        .addSecuritySchemes("bearer-key",
                                new SecurityScheme()
                                        .type(SecurityScheme.Type.HTTP)
                                        .scheme("bearer")
                                        .bearerFormat("JWT")));
    }
}